// generated by ai
use lsp_types::{*, CompletionItemTag};

pub fn get_client_capabilities() -> ClientCapabilities {
    ClientCapabilities {
        workspace: Some(get_workspace_capabilities()),
        text_document: Some(get_text_document_capabilities()),
        window: Some(get_window_capabilities()),
        general: Some(get_general_capabilities()),
        ..Default::default()
    }
}

fn get_workspace_capabilities() -> WorkspaceClientCapabilities {
    WorkspaceClientCapabilities {
        apply_edit: Some(true),
        did_change_configuration: Some(DidChangeConfigurationClientCapabilities {
            dynamic_registration: Some(true)
        }),
        workspace_edit: Some(WorkspaceEditClientCapabilities {
            document_changes: Some(true),
            resource_operations: Some(vec![
                ResourceOperationKind::Create,
                ResourceOperationKind::Rename,
                ResourceOperationKind::Delete
            ]),
            failure_handling: Some(FailureHandlingKind::Abort),
            normalizes_line_endings: Some(true),
            change_annotation_support: None,
        }),
        did_change_watched_files: Some(DidChangeWatchedFilesClientCapabilities {
            dynamic_registration: Some(true),
            relative_pattern_support: Some(true),
        }),
        symbol: Some(get_workspace_symbol_capabilities()),
        ..Default::default()
    }
}

fn get_text_document_capabilities() -> TextDocumentClientCapabilities {
    TextDocumentClientCapabilities {
        synchronization: Some(TextDocumentSyncClientCapabilities {
            dynamic_registration: Some(true),
            will_save: Some(true),
            will_save_wait_until: Some(true),
            did_save: Some(true),
        }),
        completion: Some(get_completion_capabilities()),
        hover: Some(HoverClientCapabilities {
            dynamic_registration: Some(true),
            content_format: Some(vec![MarkupKind::Markdown, MarkupKind::PlainText]),
        }),
        signature_help: Some(get_signature_help_capabilities()),
        declaration: Some(get_goto_capabilities()),
        definition: Some(get_goto_capabilities()),
        type_definition: Some(get_goto_capabilities()),
        implementation: Some(get_goto_capabilities()),
        references: Some(ReferenceClientCapabilities {
            dynamic_registration: Some(true),
        }),
        document_highlight: Some(DocumentHighlightClientCapabilities {
            dynamic_registration: Some(true),
        }),
        document_symbol: Some(get_document_symbol_capabilities()),
        formatting: Some(DocumentFormattingClientCapabilities {
            dynamic_registration: Some(true),
        }),
        range_formatting: Some(DocumentRangeFormattingClientCapabilities {
            dynamic_registration: Some(true),
        }),
        publish_diagnostics: Some(get_publish_diagnostics_capabilities()),
        ..Default::default()
    }
}

fn get_window_capabilities() -> WindowClientCapabilities {
    WindowClientCapabilities {
        work_done_progress: Some(true),
        ..Default::default()
    }
}

fn get_general_capabilities() -> GeneralClientCapabilities {
    GeneralClientCapabilities {
        regular_expressions: Some(RegularExpressionsClientCapabilities {
            engine: String::from("ECMAScript"),
            version: Some(String::from("ES2020")),
        }),
        markdown: Some(MarkdownClientCapabilities {
            parser: String::from("marked"),
            version: Some(String::from("1.1.0")),
            allowed_tags: None,
        }),
        ..Default::default()
    }
}

fn get_completion_capabilities() -> CompletionClientCapabilities {
    CompletionClientCapabilities {
        dynamic_registration: Some(true),
        completion_item: Some(CompletionItemCapability {
            snippet_support: Some(true),
            commit_characters_support: Some(true),
            documentation_format: Some(vec![MarkupKind::Markdown, MarkupKind::PlainText]),
            deprecated_support: Some(true),
            preselect_support: Some(true),
            tag_support: Some(TagSupport {
                value_set: vec![CompletionItemTag::DEPRECATED],
            }),
            insert_replace_support: Some(true),
            resolve_support: Some(CompletionItemCapabilityResolveSupport {
                properties: vec![
                    String::from("documentation"),
                    String::from("detail"),
                    String::from("additionalTextEdits"),
                ],
            }),
            ..Default::default()
        }),
        completion_item_kind: Some(CompletionItemKindCapability {
            value_set: Some(get_completion_item_kinds()),
        }),
        context_support: Some(true),
        ..Default::default()
    }
}

fn get_signature_help_capabilities() -> SignatureHelpClientCapabilities {
    SignatureHelpClientCapabilities {
        dynamic_registration: Some(true),
        signature_information: Some(SignatureInformationSettings {
            documentation_format: Some(vec![MarkupKind::Markdown, MarkupKind::PlainText]),
            parameter_information: Some(ParameterInformationSettings {
                label_offset_support: Some(true),
            }),
            active_parameter_support: Some(true),
        }),
        ..Default::default()
    }
}

fn get_document_symbol_capabilities() -> DocumentSymbolClientCapabilities {
    DocumentSymbolClientCapabilities {
        dynamic_registration: Some(true),
        symbol_kind: Some(SymbolKindCapability {
            value_set: Some(get_symbol_kinds()),
        }),
        hierarchical_document_symbol_support: Some(true),
        ..Default::default()
    }
}

fn get_publish_diagnostics_capabilities() -> PublishDiagnosticsClientCapabilities {
    PublishDiagnosticsClientCapabilities {
        related_information: Some(true),
        tag_support: Some(TagSupport {
            value_set: vec![
                DiagnosticTag::UNNECESSARY,
                DiagnosticTag::DEPRECATED,
            ],
        }),
        version_support: Some(true),
        code_description_support: Some(true),
        data_support: Some(true),
        ..Default::default()
    }
}

fn get_goto_capabilities() -> GotoCapability {
    GotoCapability {
        dynamic_registration: Some(true),
        link_support: Some(true),
    }
}

fn get_workspace_symbol_capabilities() -> WorkspaceSymbolClientCapabilities {
    WorkspaceSymbolClientCapabilities {
        dynamic_registration: Some(true),
        symbol_kind: Some(SymbolKindCapability {
            value_set: Some(get_symbol_kinds()),
        }),
        ..Default::default()
    }
}

fn get_symbol_kinds() -> Vec<SymbolKind> {
    vec![
        SymbolKind::FILE,
        SymbolKind::MODULE,
        SymbolKind::NAMESPACE,
        SymbolKind::PACKAGE,
        SymbolKind::CLASS,
        SymbolKind::METHOD,
        SymbolKind::PROPERTY,
        SymbolKind::FIELD,
        SymbolKind::CONSTRUCTOR,
        SymbolKind::ENUM,
        SymbolKind::INTERFACE,
        SymbolKind::FUNCTION,
        SymbolKind::VARIABLE,
        SymbolKind::CONSTANT,
        SymbolKind::STRING,
        SymbolKind::NUMBER,
        SymbolKind::BOOLEAN,
        SymbolKind::ARRAY,
        SymbolKind::OBJECT,
        SymbolKind::KEY,
        SymbolKind::NULL,
        SymbolKind::ENUM_MEMBER,
        SymbolKind::STRUCT,
        SymbolKind::EVENT,
        SymbolKind::OPERATOR,
        SymbolKind::TYPE_PARAMETER,
    ]
}

fn get_completion_item_kinds() -> Vec<CompletionItemKind> {
    vec![
        CompletionItemKind::TEXT,
        CompletionItemKind::METHOD,
        CompletionItemKind::FUNCTION,
        CompletionItemKind::CONSTRUCTOR,
        CompletionItemKind::FIELD,
        CompletionItemKind::VARIABLE,
        CompletionItemKind::CLASS,
        CompletionItemKind::INTERFACE,
        CompletionItemKind::MODULE,
        CompletionItemKind::PROPERTY,
        CompletionItemKind::UNIT,
        CompletionItemKind::VALUE,
        CompletionItemKind::ENUM,
        CompletionItemKind::KEYWORD,
        CompletionItemKind::SNIPPET,
        CompletionItemKind::COLOR,
        CompletionItemKind::FILE,
        CompletionItemKind::REFERENCE,
        CompletionItemKind::FOLDER,
        CompletionItemKind::ENUM_MEMBER,
        CompletionItemKind::CONSTANT,
        CompletionItemKind::STRUCT,
        CompletionItemKind::EVENT,
        CompletionItemKind::OPERATOR,
        CompletionItemKind::TYPE_PARAMETER,
    ]
}